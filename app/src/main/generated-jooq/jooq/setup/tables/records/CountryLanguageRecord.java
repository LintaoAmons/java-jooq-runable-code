/*
 * This file is generated by jOOQ.
 */
package jooq.setup.tables.records;


import jooq.setup.tables.CountryLanguage;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryLanguageRecord extends UpdatableRecordImpl<CountryLanguageRecord> implements Record4<String, String, Boolean, Float> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.country_language.country_code</code>.
     */
    public CountryLanguageRecord setCountryCode(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.country_language.country_code</code>.
     */
    public String getCountryCode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.country_language.language</code>.
     */
    public CountryLanguageRecord setLanguage(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.country_language.language</code>.
     */
    public String getLanguage() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.country_language.is_official</code>.
     */
    public CountryLanguageRecord setIsOfficial(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.country_language.is_official</code>.
     */
    public Boolean getIsOfficial() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.country_language.percentage</code>.
     */
    public CountryLanguageRecord setPercentage(Float value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.country_language.percentage</code>.
     */
    public Float getPercentage() {
        return (Float) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Boolean, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Boolean, Float> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CountryLanguage.COUNTRY_LANGUAGE.COUNTRY_CODE;
    }

    @Override
    public Field<String> field2() {
        return CountryLanguage.COUNTRY_LANGUAGE.LANGUAGE;
    }

    @Override
    public Field<Boolean> field3() {
        return CountryLanguage.COUNTRY_LANGUAGE.IS_OFFICIAL;
    }

    @Override
    public Field<Float> field4() {
        return CountryLanguage.COUNTRY_LANGUAGE.PERCENTAGE;
    }

    @Override
    public String component1() {
        return getCountryCode();
    }

    @Override
    public String component2() {
        return getLanguage();
    }

    @Override
    public Boolean component3() {
        return getIsOfficial();
    }

    @Override
    public Float component4() {
        return getPercentage();
    }

    @Override
    public String value1() {
        return getCountryCode();
    }

    @Override
    public String value2() {
        return getLanguage();
    }

    @Override
    public Boolean value3() {
        return getIsOfficial();
    }

    @Override
    public Float value4() {
        return getPercentage();
    }

    @Override
    public CountryLanguageRecord value1(String value) {
        setCountryCode(value);
        return this;
    }

    @Override
    public CountryLanguageRecord value2(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public CountryLanguageRecord value3(Boolean value) {
        setIsOfficial(value);
        return this;
    }

    @Override
    public CountryLanguageRecord value4(Float value) {
        setPercentage(value);
        return this;
    }

    @Override
    public CountryLanguageRecord values(String value1, String value2, Boolean value3, Float value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CountryLanguageRecord
     */
    public CountryLanguageRecord() {
        super(CountryLanguage.COUNTRY_LANGUAGE);
    }

    /**
     * Create a detached, initialised CountryLanguageRecord
     */
    public CountryLanguageRecord(String countryCode, String language, Boolean isOfficial, Float percentage) {
        super(CountryLanguage.COUNTRY_LANGUAGE);

        setCountryCode(countryCode);
        setLanguage(language);
        setIsOfficial(isOfficial);
        setPercentage(percentage);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CountryLanguageRecord
     */
    public CountryLanguageRecord(jooq.setup.tables.pojos.CountryLanguage value) {
        super(CountryLanguage.COUNTRY_LANGUAGE);

        if (value != null) {
            setCountryCode(value.getCountryCode());
            setLanguage(value.getLanguage());
            setIsOfficial(value.getIsOfficial());
            setPercentage(value.getPercentage());
            resetChangedOnNotNull();
        }
    }
}
