/*
 * This file is generated by jOOQ.
 */
package jooq.setup.tables;


import java.util.function.Function;

import jooq.setup.Keys;
import jooq.setup.Public;
import jooq.setup.tables.records.CountryFlagRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryFlag extends TableImpl<CountryFlagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.country_flag</code>
     */
    public static final CountryFlag COUNTRY_FLAG = new CountryFlag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryFlagRecord> getRecordType() {
        return CountryFlagRecord.class;
    }

    /**
     * The column <code>public.country_flag.code2</code>. Following ISO 3166-1
     * alpha-2 code
     */
    public final TableField<CountryFlagRecord, String> CODE2 = createField(DSL.name("code2"), SQLDataType.CHAR(2).nullable(false), this, "Following ISO 3166-1 alpha-2 code");

    /**
     * The column <code>public.country_flag.emoji</code>. Source: Emoji flag
     * symbols (https://apps.timwhitlock.info/emoji/tables/iso3166)
     */
    public final TableField<CountryFlagRecord, String> EMOJI = createField(DSL.name("emoji"), SQLDataType.CLOB.nullable(false), this, "Source: Emoji flag symbols (https://apps.timwhitlock.info/emoji/tables/iso3166)");

    /**
     * The column <code>public.country_flag.unicode</code>.
     */
    public final TableField<CountryFlagRecord, String> UNICODE = createField(DSL.name("unicode"), SQLDataType.CLOB, this, "");

    private CountryFlag(Name alias, Table<CountryFlagRecord> aliased) {
        this(alias, aliased, null);
    }

    private CountryFlag(Name alias, Table<CountryFlagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.country_flag</code> table reference
     */
    public CountryFlag(String alias) {
        this(DSL.name(alias), COUNTRY_FLAG);
    }

    /**
     * Create an aliased <code>public.country_flag</code> table reference
     */
    public CountryFlag(Name alias) {
        this(alias, COUNTRY_FLAG);
    }

    /**
     * Create a <code>public.country_flag</code> table reference
     */
    public CountryFlag() {
        this(DSL.name("country_flag"), null);
    }

    public <O extends Record> CountryFlag(Table<O> child, ForeignKey<O, CountryFlagRecord> key) {
        super(child, key, COUNTRY_FLAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CountryFlagRecord> getPrimaryKey() {
        return Keys.COUNTRY_FLAG_PKEY;
    }

    @Override
    public CountryFlag as(String alias) {
        return new CountryFlag(DSL.name(alias), this);
    }

    @Override
    public CountryFlag as(Name alias) {
        return new CountryFlag(alias, this);
    }

    @Override
    public CountryFlag as(Table<?> alias) {
        return new CountryFlag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CountryFlag rename(String name) {
        return new CountryFlag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CountryFlag rename(Name name) {
        return new CountryFlag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CountryFlag rename(Table<?> name) {
        return new CountryFlag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
