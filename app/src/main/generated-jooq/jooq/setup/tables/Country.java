/*
 * This file is generated by jOOQ.
 */
package jooq.setup.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.setup.Keys;
import jooq.setup.Public;
import jooq.setup.tables.records.CountryRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Country extends TableImpl<CountryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.country</code>
     */
    public static final Country COUNTRY = new Country();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRecord> getRecordType() {
        return CountryRecord.class;
    }

    /**
     * The column <code>public.country.code</code>.
     */
    public final TableField<CountryRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.country.name</code>.
     */
    public final TableField<CountryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country.continent</code>.
     */
    public final TableField<CountryRecord, String> CONTINENT = createField(DSL.name("continent"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country.region</code>.
     */
    public final TableField<CountryRecord, String> REGION = createField(DSL.name("region"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country.surface_area</code>.
     */
    public final TableField<CountryRecord, Float> SURFACE_AREA = createField(DSL.name("surface_area"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.country.indep_year</code>.
     */
    public final TableField<CountryRecord, Short> INDEP_YEAR = createField(DSL.name("indep_year"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.country.population</code>.
     */
    public final TableField<CountryRecord, Integer> POPULATION = createField(DSL.name("population"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.country.life_expectancy</code>.
     */
    public final TableField<CountryRecord, Float> LIFE_EXPECTANCY = createField(DSL.name("life_expectancy"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.country.gnp</code>. GNP is Gross national product
     */
    public final TableField<CountryRecord, BigDecimal> GNP = createField(DSL.name("gnp"), SQLDataType.NUMERIC(10, 2), this, "GNP is Gross national product");

    /**
     * The column <code>public.country.gnp_old</code>.
     */
    public final TableField<CountryRecord, BigDecimal> GNP_OLD = createField(DSL.name("gnp_old"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.country.local_name</code>.
     */
    public final TableField<CountryRecord, String> LOCAL_NAME = createField(DSL.name("local_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country.government_form</code>.
     */
    public final TableField<CountryRecord, String> GOVERNMENT_FORM = createField(DSL.name("government_form"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country.head_of_state</code>.
     */
    public final TableField<CountryRecord, String> HEAD_OF_STATE = createField(DSL.name("head_of_state"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.country.capital</code>.
     */
    public final TableField<CountryRecord, Integer> CAPITAL = createField(DSL.name("capital"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.country.code2</code>. Following ISO 3166-1
     * alpha-2 code
     */
    public final TableField<CountryRecord, String> CODE2 = createField(DSL.name("code2"), SQLDataType.CHAR(2).nullable(false), this, "Following ISO 3166-1 alpha-2 code");

    private Country(Name alias, Table<CountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Country(Name alias, Table<CountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.country</code> table reference
     */
    public Country(String alias) {
        this(DSL.name(alias), COUNTRY);
    }

    /**
     * Create an aliased <code>public.country</code> table reference
     */
    public Country(Name alias) {
        this(alias, COUNTRY);
    }

    /**
     * Create a <code>public.country</code> table reference
     */
    public Country() {
        this(DSL.name("country"), null);
    }

    public <O extends Record> Country(Table<O> child, ForeignKey<O, CountryRecord> key) {
        super(child, key, COUNTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CountryRecord> getPrimaryKey() {
        return Keys.COUNTRY_PKEY;
    }

    @Override
    public List<ForeignKey<CountryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COUNTRY__COUNTRY_CAPITAL_FKEY);
    }

    private transient City _city;

    /**
     * Get the implicit join path to the <code>public.city</code> table.
     */
    public City city() {
        if (_city == null)
            _city = new City(this, Keys.COUNTRY__COUNTRY_CAPITAL_FKEY);

        return _city;
    }

    @Override
    public List<Check<CountryRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("country_continent_check"), "(((continent = 'Asia'::text) OR (continent = 'Europe'::text) OR (continent = 'North America'::text) OR (continent = 'Africa'::text) OR (continent = 'Oceania'::text) OR (continent = 'Antarctica'::text) OR (continent = 'South America'::text)))", true)
        );
    }

    @Override
    public Country as(String alias) {
        return new Country(DSL.name(alias), this);
    }

    @Override
    public Country as(Name alias) {
        return new Country(alias, this);
    }

    @Override
    public Country as(Table<?> alias) {
        return new Country(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(String name) {
        return new Country(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(Name name) {
        return new Country(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(Table<?> name) {
        return new Country(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, Float, Short, Integer, Float, BigDecimal, BigDecimal, String, String, String, Integer, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super String, ? super String, ? super String, ? super String, ? super Float, ? super Short, ? super Integer, ? super Float, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super String, ? super String, ? super String, ? super String, ? super Float, ? super Short, ? super Integer, ? super Float, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
