/*
 * This file is generated by jOOQ.
 */
package jooq.setup.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryFlag implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String code2;
    private final String emoji;
    private final String unicode;

    public CountryFlag(CountryFlag value) {
        this.code2 = value.code2;
        this.emoji = value.emoji;
        this.unicode = value.unicode;
    }

    public CountryFlag(
        String code2,
        String emoji,
        String unicode
    ) {
        this.code2 = code2;
        this.emoji = emoji;
        this.unicode = unicode;
    }

    /**
     * Getter for <code>public.country_flag.code2</code>. Following ISO 3166-1
     * alpha-2 code
     */
    public String getCode2() {
        return this.code2;
    }

    /**
     * Getter for <code>public.country_flag.emoji</code>. Source: Emoji flag
     * symbols (https://apps.timwhitlock.info/emoji/tables/iso3166)
     */
    public String getEmoji() {
        return this.emoji;
    }

    /**
     * Getter for <code>public.country_flag.unicode</code>.
     */
    public String getUnicode() {
        return this.unicode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final CountryFlag other = (CountryFlag) obj;
        if (this.code2 == null) {
            if (other.code2 != null)
                return false;
        }
        else if (!this.code2.equals(other.code2))
            return false;
        if (this.emoji == null) {
            if (other.emoji != null)
                return false;
        }
        else if (!this.emoji.equals(other.emoji))
            return false;
        if (this.unicode == null) {
            if (other.unicode != null)
                return false;
        }
        else if (!this.unicode.equals(other.unicode))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.code2 == null) ? 0 : this.code2.hashCode());
        result = prime * result + ((this.emoji == null) ? 0 : this.emoji.hashCode());
        result = prime * result + ((this.unicode == null) ? 0 : this.unicode.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CountryFlag (");

        sb.append(code2);
        sb.append(", ").append(emoji);
        sb.append(", ").append(unicode);

        sb.append(")");
        return sb.toString();
    }
}
